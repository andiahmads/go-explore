// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blog/proto/blog.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Blog struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId             string   `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blog) Reset()         { *m = Blog{} }
func (m *Blog) String() string { return proto.CompactTextString(m) }
func (*Blog) ProtoMessage()    {}
func (*Blog) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd72bec3d0514c01, []int{0}
}

func (m *Blog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blog.Unmarshal(m, b)
}
func (m *Blog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blog.Marshal(b, m, deterministic)
}
func (m *Blog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blog.Merge(m, src)
}
func (m *Blog) XXX_Size() int {
	return xxx_messageInfo_Blog.Size(m)
}
func (m *Blog) XXX_DiscardUnknown() {
	xxx_messageInfo_Blog.DiscardUnknown(m)
}

var xxx_messageInfo_Blog proto.InternalMessageInfo

func (m *Blog) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Blog) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *Blog) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Blog) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type BlogId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlogId) Reset()         { *m = BlogId{} }
func (m *BlogId) String() string { return proto.CompactTextString(m) }
func (*BlogId) ProtoMessage()    {}
func (*BlogId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd72bec3d0514c01, []int{1}
}

func (m *BlogId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlogId.Unmarshal(m, b)
}
func (m *BlogId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlogId.Marshal(b, m, deterministic)
}
func (m *BlogId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlogId.Merge(m, src)
}
func (m *BlogId) XXX_Size() int {
	return xxx_messageInfo_BlogId.Size(m)
}
func (m *BlogId) XXX_DiscardUnknown() {
	xxx_messageInfo_BlogId.DiscardUnknown(m)
}

var xxx_messageInfo_BlogId proto.InternalMessageInfo

func (m *BlogId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Blog)(nil), "blog.Blog")
	proto.RegisterType((*BlogId)(nil), "blog.BlogId")
}

func init() { proto.RegisterFile("blog/proto/blog.proto", fileDescriptor_bd72bec3d0514c01) }

var fileDescriptor_bd72bec3d0514c01 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x65, 0xd7, 0xb5, 0xed, 0x8e, 0xe2, 0x61, 0x50, 0x09, 0xdb, 0x8b, 0x14, 0x11, 0x4f, 0xd9,
	0x5a, 0x8f, 0xde, 0xaa, 0x1e, 0x16, 0x3c, 0x55, 0xbc, 0x78, 0x91, 0xed, 0x66, 0x5c, 0x03, 0xb1,
	0x59, 0xd2, 0xa9, 0xe0, 0x7f, 0xfb, 0x01, 0x92, 0xc4, 0x62, 0x2b, 0xf6, 0x94, 0x37, 0xf3, 0xde,
	0x9b, 0x99, 0x3c, 0x38, 0x99, 0x1b, 0xdb, 0x96, 0x9d, 0xb3, 0x6c, 0x4b, 0x0f, 0x65, 0x80, 0x98,
	0x79, 0x5c, 0x0c, 0x5b, 0x6b, 0x5b, 0x43, 0x91, 0x9e, 0xaf, 0x5e, 0x4b, 0x7a, 0xef, 0xf8, 0x33,
	0x4a, 0x46, 0x0d, 0x64, 0x53, 0x63, 0x5b, 0x3c, 0x82, 0x54, 0x2b, 0x91, 0x9c, 0x25, 0x97, 0xf9,
	0x2c, 0xd5, 0x0a, 0x87, 0x90, 0xd7, 0x2b, 0x7e, 0xb3, 0xee, 0x45, 0x2b, 0x91, 0x86, 0xf6, 0x20,
	0x36, 0x2a, 0x85, 0xc7, 0xb0, 0xcf, 0x9a, 0x0d, 0x89, 0xbd, 0x40, 0xc4, 0x02, 0x05, 0xf4, 0x1b,
	0xbb, 0x60, 0x5a, 0xb0, 0xc8, 0x42, 0x7f, 0x5d, 0x8e, 0x04, 0xf4, 0xfc, 0x92, 0x4a, 0xfd, 0x5d,
	0x33, 0xf9, 0x4a, 0xe0, 0xc0, 0x53, 0x8f, 0xe4, 0x3e, 0x74, 0x43, 0x78, 0x01, 0x70, 0xeb, 0xa8,
	0x66, 0x0a, 0x47, 0x81, 0x0c, 0x9f, 0xf1, 0xb8, 0x38, 0xfc, 0xc5, 0x95, 0xc2, 0x73, 0x18, 0xcc,
	0xa8, 0x56, 0x41, 0xb5, 0xc5, 0x14, 0x1b, 0x1e, 0x1c, 0x03, 0x3c, 0x75, 0xea, 0xbf, 0x69, 0xa7,
	0x32, 0x86, 0x22, 0xd7, 0xa1, 0xc8, 0x7b, 0x1f, 0x0a, 0x4e, 0x00, 0xee, 0xc8, 0xd0, 0x8f, 0x63,
	0x7b, 0xf2, 0x2e, 0xcf, 0x15, 0xe4, 0x0f, 0x7a, 0xc9, 0x5e, 0xb5, 0xc4, 0x1d, 0xa2, 0xcd, 0xb3,
	0xc6, 0xc9, 0x34, 0x7f, 0xee, 0xcb, 0x9b, 0xa8, 0xe8, 0x85, 0xe7, 0xfa, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x67, 0x29, 0x19, 0x8f, 0xc3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlogServiceClient interface {
	// Requests the creation for a Blog
	// Returns Status.INTERNAL if the blog couldn't be created due to Db error
	// Returns the created Blog's Id
	CreateBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error)
	// Requests access to the content of a Blog by sending an Id
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Blog content
	ReadBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error)
	// Requests the update of a Blog in Db
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Status.INTERNAL if the blog couldn't be updated due to Db error
	// Returns Empty
	UpdateBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*empty.Empty, error)
	// Requests the delete of a Blog in Db by giving its Id
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Status.INTERNAL if the blog couldn't be deleted due to Db error
	// Returns Empty
	DeleteBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Requests access to all the Blogs in Db
	// Returns stream of Blogs
	ListBlogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (BlogService_ListBlogsClient, error)
}

type blogServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlogServiceClient(cc *grpc.ClientConn) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) CreateBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error) {
	out := new(BlogId)
	err := c.cc.Invoke(ctx, "/blog.BlogService/CreateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ReadBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogService/ReadBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blog.BlogService/UpdateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blog.BlogService/DeleteBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListBlogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (BlogService_ListBlogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlogService_serviceDesc.Streams[0], "/blog.BlogService/ListBlogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &blogServiceListBlogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlogService_ListBlogsClient interface {
	Recv() (*Blog, error)
	grpc.ClientStream
}

type blogServiceListBlogsClient struct {
	grpc.ClientStream
}

func (x *blogServiceListBlogsClient) Recv() (*Blog, error) {
	m := new(Blog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlogServiceServer is the server API for BlogService service.
type BlogServiceServer interface {
	// Requests the creation for a Blog
	// Returns Status.INTERNAL if the blog couldn't be created due to Db error
	// Returns the created Blog's Id
	CreateBlog(context.Context, *Blog) (*BlogId, error)
	// Requests access to the content of a Blog by sending an Id
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Blog content
	ReadBlog(context.Context, *BlogId) (*Blog, error)
	// Requests the update of a Blog in Db
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Status.INTERNAL if the blog couldn't be updated due to Db error
	// Returns Empty
	UpdateBlog(context.Context, *Blog) (*empty.Empty, error)
	// Requests the delete of a Blog in Db by giving its Id
	// Returns Status.NOT_FOUND if the Id doesn't match any Blog in Db
	// Returns Status.INTERNAL if the blog couldn't be deleted due to Db error
	// Returns Empty
	DeleteBlog(context.Context, *BlogId) (*empty.Empty, error)
	// Requests access to all the Blogs in Db
	// Returns stream of Blogs
	ListBlogs(*empty.Empty, BlogService_ListBlogsServer) error
}

// UnimplementedBlogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (*UnimplementedBlogServiceServer) CreateBlog(ctx context.Context, req *Blog) (*BlogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (*UnimplementedBlogServiceServer) ReadBlog(ctx context.Context, req *BlogId) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlog not implemented")
}
func (*UnimplementedBlogServiceServer) UpdateBlog(ctx context.Context, req *Blog) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (*UnimplementedBlogServiceServer) DeleteBlog(ctx context.Context, req *BlogId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (*UnimplementedBlogServiceServer) ListBlogs(req *empty.Empty, srv BlogService_ListBlogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBlogs not implemented")
}

func RegisterBlogServiceServer(s *grpc.Server, srv BlogServiceServer) {
	s.RegisterService(&_BlogService_serviceDesc, srv)
}

func _BlogService_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogService/CreateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ReadBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ReadBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogService/ReadBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ReadBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogService/UpdateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateBlog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogService/DeleteBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListBlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).ListBlogs(m, &blogServiceListBlogsServer{stream})
}

type BlogService_ListBlogsServer interface {
	Send(*Blog) error
	grpc.ServerStream
}

type blogServiceListBlogsServer struct {
	grpc.ServerStream
}

func (x *blogServiceListBlogsServer) Send(m *Blog) error {
	return x.ServerStream.SendMsg(m)
}

var _BlogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _BlogService_CreateBlog_Handler,
		},
		{
			MethodName: "ReadBlog",
			Handler:    _BlogService_ReadBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _BlogService_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogService_DeleteBlog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBlogs",
			Handler:       _BlogService_ListBlogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blog/proto/blog.proto",
}
